## Introduction:
The aviation industry is growing rapidly as airline companies look to retain and aquire new customers. Airlines can quickly adapt to the market in a competitive environment. Usually Price is used as the deciding competitive component. Passengers have also started considering an airline's services. In this analysis we will find out how the services affect a passenger's satisfaction.  <br>
<br>
To ensure profitability, aviation companies can offer quality services to improve customer satisfaction and create a loyal customer base. This will be rewarding for the airlines in the long run. <br>
<br>
Airline management can employ a customer driven approach to determine which services are desired the most by passengers. 

The U.S. Airline Passenger Satisfaction Dataset describes passenger satisfaction by conduct a survey at the airport after arriving in 2015. The dataset details each customer's information as it relates to age, gender, type of travel, flight distance, class type, departure and arrival delay.  

The dataset also contains 14 airline services of customer satisfaction levels ranging from values 0â€“5. The airline services for measured satis- faction level categories such: inflight wi-fi service, departure/arrival time convenience, ease of online booking, gate location, food and drink, online boarding, seat comfort, inflight entertainment, on-board service, leg-room service, baggage handling, check-in service, inflight service, and cleanliness.

#Importing the necessary libraries 


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import seaborn as sns 

from sklearn.decomposition import PCA
from sklearn import preprocessing
from sklearn.ensemble import RandomForestClassifier as rf
from eli5.sklearn import PermutationImportance
from sklearn.preprocessing import StandardScaler 
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.impute import KNNImputer
from sklearn import metrics 
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC
from sklearn import ensemble
from sklearn.metrics import accuracy_score, roc_auc_score, classification_report, plot_confusion_matrix, plot_roc_curve

import warnings
warnings.filterwarnings('ignore')

#Loading the training dataset 
train = pd.read_csv("/Users/mayankagarwal/Documents/Stat 432 Project/train.csv")

#Loading the testing dataset 
test = pd.read_csv("/Users/mayankagarwal/Documents/Stat 432 Project/test.csv")

#looking at the first 5 rows. 
train.head()

test.head()

Gender: Gender of the passengers (Female, Male)

Customer Type: The customer type (Loyal customer, disloyal customer)

Age: The actual age of the passengers

Type of Travel: Purpose of the flight of the passengers (Personal Travel, Business Travel)

Class: Travel class in the plane of the passengers (Business, Eco, Eco Plus)

Flight distance: The flight distance of this journey

Inflight wifi service: Satisfaction level of the inflight wifi service (0:Not Applicable;1-5)

Departure/Arrival time convenient: Satisfaction level of Departure/Arrival time convenient

Ease of Online booking: Satisfaction level of online booking

Gate location: Satisfaction level of Gate location

Food and drink: Satisfaction level of Food and drink

Online boarding: Satisfaction level of online boarding

Seat comfort: Satisfaction level of Seat comfort

Inflight entertainment: Satisfaction level of inflight entertainment

On-board service: Satisfaction level of On-board service

Leg room service: Satisfaction level of Leg room service

Baggage handling: Satisfaction level of baggage handling

Check-in service: Satisfaction level of Check-in service

Inflight service: Satisfaction level of inflight service

Cleanliness: Satisfaction level of Cleanliness

Departure Delay in Minutes: Minutes delayed when departure

Arrival Delay in Minutes: Minutes delayed when Arrival

Satisfaction: Airline satisfaction level(Satisfaction, neutral or dissatisfaction)

sns.countplot(x = 'Gender', data = train)

sns.countplot(x = 'Customer Type', data = train)

sns.countplot(x = 'Type of Travel', data = train)

sns.countplot(x = 'Class', data = train)

train.describe()

#Checking Info of our data -
train.info()

#Checking for Data Imbalance -
fig = plt.figure(figsize = (9,6))
train['satisfaction'].value_counts(normalize = True).plot(kind='bar', color= ['blue','yellow'], alpha = 0.9, rot=0)
plt.title('Satisfaction Level of customers')
plt.show()

train['satisfaction'].value_counts(normalize = True)

Hence we see that we have  56.67% of 'Neutral or Dissatisfied' customers as compared to 43.33% of 'Satisfied' customers and thus our data is almost balanced.

with sns.axes_style(style='ticks'):
    g = sns.catplot("satisfaction", col="Gender", col_wrap=2, data=train, kind="count", height=3, aspect=2.0)  
    g = sns.catplot("satisfaction", col="Customer Type", col_wrap=2, data=train, kind="count", height=3, aspect=2.0)

For both Males and Females, we see that no. of of 'Neutral or Dissatisfied' customers are more as compared to 'Satisfied' customers. The same logic applies to 'Loyal' and 'DisLoyal' Customers. Also we see that the no . of Loyal customers are way more than 'Disloyal' customers.

with sns.axes_style('dark'):
    g = sns.catplot("Age", data=train, aspect=4.0, kind='count', hue='satisfaction', order=range(6, 90))
    g.set_ylabels('Count of Satisfaction level at a certain age')

We see that our early age passengers i.e. 8-38 are more nuetral or dissatisfied as comapred to satisfied. Passengers aged 39-60 have higher satisfaction level and then the trend for dissatisfied or neutral is again higher for the remaining higher age group. 

with sns.axes_style('dark'):
    g = sns.catplot(x="Flight Distance", y="Type of Travel",
                    hue="satisfaction", col="Class", data=train, kind="boxen", height=5.5, aspect=.9)

 For business travel in business class category, th## For Eco Plus class, very inconvenient Departure/Arrival time (Departure/Arrival_time_convenient = 0) has really high no. of dissatisfied passengers, even when online boarding is done very well. For other combinations, no. of satisfied passengers are on the higher side compared to no. of dissatisfied passengers.e number of satisfied passengers are quite on the higher side for longer flight distance. For other combinations, there is almost equal distribution of satisfied and dissatisfied passengers.

For Eco Plus class, very inconvenient Departure/Arrival time (Departure/Arrival_time_convenient = 0) has really high no. of dissatisfied passengers, even when online boarding is done very well. For other combinations, no. of satisfied passengers are on the higher side compared to no. of dissatisfied passengers.


with sns.axes_style('dark'):
    g = sns.catplot(x="Departure/Arrival time convenient", 
                    y="Online boarding", hue="satisfaction", col="Class", 
                    data=train, kind="bar", height=5.5, aspect=.9)

with sns.axes_style('white'):
    g = sns.catplot(x="Class", y="Departure Delay in Minutes", hue="satisfaction", col="Type of Travel", data=train, kind="bar", height=4.5, aspect=.8)
    g = sns.catplot(x="Class", y="Arrival Delay in Minutes", hue="satisfaction", col="Type of Travel", data=train, kind="bar", height=4.5, aspect=.8)

For personal travel (specially Eco Plus and Eco), the no. of dissatisfied passengers are really high when arrival delay in minutes is high. As observed the level of dissatisfied or neutral passengers is always more than the satisfied passengers whenever there's a delay in arrival or departure time. 

For business class, it is observed that all gate locations have higher no. of dissatisfied passengers when baggage handling is not done perfectly well (rating <= 4). For Eco Plus, when the gate location is 1 and for Eco, when the gate location is 2, even when the baggages are handled in a mediocre way (rating in range 2.0 - 4.0), passengers remained dissatisfied.

with sns.axes_style('white'):
    g = sns.catplot(x="Gate location", y="Baggage handling", hue="satisfaction", col="Class", data=train, kind="boxen", height=4.5, aspect=.8)

The Eco Plus passengers are mostly satisfied without in-flight wi-fi service (rating 0) and medium level of in-flight entertainment (rating 2 - 4). For Business class passengers, only highest level of in-flight entertainment (rating 5) can make them satisfied. For Eco passengers, high level of in-flight entertainment (rating 3 - 5) and very high wi-fi service availability (rating 5) can make them satisfied.

g = sns.catplot(x="Inflight wifi service", y="Inflight entertainment", 
                hue="satisfaction", col="Class", data=train, kind="box", height=4.5, aspect=.8)

But naturally as seat comfort increases, the customer satisfaction increases as well.

with sns.axes_style(style='ticks'):
    g = sns.catplot("satisfaction", col="Seat comfort", 
                    col_wrap=6, data=train, kind="count", height=2.5, aspect=.8)

As cleanliness increases, the satisfaction level of passengers increases.

with sns.axes_style(style='ticks'):
    g = sns.catplot("satisfaction", col="Cleanliness", col_wrap=6, data=train, kind="count", height=2.5, aspect=.8)

The maximum no. of satisfied passengers belong to the category of 4 and 5 rating givers. 
Below rating 4, passengers are mostly dissatisfied.

with sns.axes_style(style='ticks'):
    g = sns.catplot("satisfaction", col="Food and drink", col_wrap=6, 
                    data=train, kind="count", height=2.5, aspect=.8)

corr = train.corr(method='spearman')
# Generate a mask for the upper triangle
mask = np.zeros_like(corr, dtype=np.bool)
mask[np.triu_indices_from(mask)] = True
f, ax = plt.subplots(figsize=(20, 18))
sns.heatmap(corr, annot = True, mask=mask, cmap="YlGnBu", center=0,
            square=True, linewidths=.5)

col_list = train.columns

col_list

## Cleaning and Transforming the Data 

### Checking for missing values in the dataset 

train.isna().sum()

test.isna().sum()

def impute(temp):
    imputer = KNNImputer(n_neighbors=2,metric='nan_euclidean')
    #Fit the dataset
    imputer.fit(temp[['Arrival Delay in Minutes']])

    # transform the dataset
    Y = imputer.transform(temp[['Arrival Delay in Minutes']]) 

    arrival_delay_imputer = pd.DataFrame(Y,columns=['Arrival Delay in Minutes']) 
    temp['Arrival Delay in Minutes']= arrival_delay_imputer['Arrival Delay in Minutes'].reset_index(drop=True) 

impute(train)
impute(test)

test.isna().sum()

#Dropping the first two columns
train = train.drop(['Unnamed: 0','id'], axis = 1)
test = test.drop(['Unnamed: 0','id'], axis = 1)

#Function to Transform the response variable 

def response(temp):
    if temp == "satisfied":
        return 1
    elif temp == 'neutral or dissatisfied':
        return 0

#Function to transform 'Gender' feature 

def gender(temp):
    if temp == "Male":
        return 0 
    elif temp == "Female":
        return 1 
    else:
        return -1 

#Function to transform 'Customer Type' feature 

def cust_type(temp):
    if temp == "Loyal Customer":
        return 1
    elif temp == "disloyal Customer":
        return 0
    else:
        return -1

#Function to transform 'Type of Travel' feature 

def type_travel(temp):
    if temp == "Business travel":
        return 1
    elif temp == "Personal Travel":
        return 0
    else:
        return -1 

#Function to transform 'Class' feature 

def class_type(temp):
    if temp == "Eco Plus":
        return 2
    elif temp == "Business":
        return 1
    elif temp == "Eco":
        return 0 
    else:
        return -1

#Function to perform the transformations on the dataset 

def transform_features(df_temp):
    df_temp['satisfaction'] = df_temp['satisfaction'].apply(response)
    df_temp['Gender'] = df_temp['Gender'].apply(gender)
    df_temp['Customer Type'] = df_temp['Customer Type'].apply(cust_type)
    df_temp['Type of Travel'] = df_temp['Type of Travel'].apply(type_travel)
    df_temp['Class'] = df_temp['Class'].apply(class_type)
    #df_temp = outlier(df_temp)
    
    return df_temp

train = transform_features(train)
test = transform_features(test)

train.head()

col_list = col_list[2:]

col_list

sns.boxplot('Flight Distance', data = train)
plt.rcParams["figure.figsize"] = (10,5)

sns.boxplot('Departure Delay in Minutes', data = train)
plt.rcParams["figure.figsize"] = (10,5)

sns.boxplot('Arrival Delay in Minutes', data = train)
plt.rcParams["figure.figsize"] = (10,5)

## Scaling the data so that all the predictors are given equal importance.
r_scaler = preprocessing.MinMaxScaler()
r_scaler.fit(train)
scaled_train = pd.DataFrame(r_scaler.transform(train), columns=train.columns)
scaled_train.head()

r_scaler.fit(test)
scaled_test = pd.DataFrame(r_scaler.transform(test), columns=test.columns)
scaled_test.head()

## Chi Square Test for feature selection
X = scaled_data.loc[:,scaled_data.columns!='satisfaction']
y = scaled_data[['satisfaction']]
selector = SelectKBest(chi2, k=10)
selector.fit(X, y)
train_new = selector.transform(X)
print(X.columns[selector.get_support(indices=True)])

##Permutation test -
#perm = PermutationImportance(rf(n_estimators=100, random_state=0).fit(X,y),random_state=1).fit(X,y)
#eli5.show_weights(perm, feature_names = X.columns.tolist())

#PCA
pca = PCA(n_components=10)
principalComponents = pca.fit_transform(X)
principalDf = pd.DataFrame(data = principalComponents
             , columns = ['PC1', 'PC2','PC3','PC4','PC5','PC6','PC7','PC8','PC9','PC10'])
principalDf

exp_var_pca = pca.explained_variance_ratio_
cum_sum_eigenvalues = np.cumsum(exp_var_pca)

plt.bar(range(0,len(exp_var_pca)), exp_var_pca, alpha=0.5, align='center', label='Individual explained variance')
plt.step(range(0,len(cum_sum_eigenvalues)), cum_sum_eigenvalues, where='mid',label='Cumulative explained variance')
plt.ylabel('Explained variance ratio')
plt.xlabel('Principal component index')
plt.legend(loc='best')
plt.tight_layout()
plt.show()

features = ['Type of Travel', 'Class', 'Flight Distance', 'Inflight wifi service',
       'Online boarding', 'Seat comfort', 'Inflight entertainment',
       'On-board service', 'Leg room service', 'Cleanliness']

test

X_train = scaled_train[features]
y_train = scaled_train['satisfaction']
X_test = scaled_test[features]
y_test = scaled_test['satisfaction']

X_train.head()

X_test.head()

len(X_train)

len(y_train)

## Classification Models 

### Logistic Regression 

logistic_params = {'penalty': 'elasticnet', 'l1_ratio':0.5, 'solver': 'saga'}
logistic_model = LogisticRegression(**logistic_params)

#Fitting Logistic regression model 
logistic_model.fit(X_train, y_train)

log_pred = logistic_model.predict(X_test)

accuracy = accuracy_score(y_test, log_pred)
print("The accuracy of Logistic regression model is : {}".format(accuracy))

#AUC 
roc = roc_auc_score(y_test, log_pred)
print("ROC Area under the curve for Logistic model : {}".format(roc))
plot_roc_curve(logistic_model, X_test, y_test)

print(classification_report(y_test, log_pred, digits=4))

plot_confusion_matrix(logistic_model, X_test, y_test)

### Decision Trees 

decision_params = {'max_depth': 12,'max_features': "sqrt"}
decision_model = DecisionTreeClassifier(**decision_params)

#Fitting Decision tree model 
decision_model.fit(X_train, y_train)

decision_pred = decision_model.predict(X_test)

accuracy = accuracy_score(y_test, decision_pred)
print("The accuracy of decison tree model is : {}".format(accuracy))

#AUC 
roc = roc_auc_score(y_test, decision_pred)
print("ROC Area under the curve for decision tree model : {}".format(roc))
plot_roc_curve(decision_model, X_test, y_test)

print(classification_report(y_test, decision_pred, digits=4))

plot_confusion_matrix(decision_model, X_test, y_test)

#### Graphical visualization of the decision tree

### Random Forests 

random_params = {'max_depth': 16,'min_samples_leaf': 1,'min_samples_split': 2,
                 'n_estimators': 100,'random_state': 67781}
random_model = RandomForestClassifier(**random_params)

#Fitting random Forests model 
random_model.fit(X_train, y_train)

random_pred = random_model.predict(X_test)

accuracy = accuracy_score(y_test, random_pred)
print("The accuracy of Logistic regression model is : {}".format(accuracy))

#AUC 
roc = roc_auc_score(y_test, random_pred)
print("ROC Area under the curve for Logistic model : {}".format(roc))
plot_roc_curve(random_model, X_test, y_test)

print(classification_report(y_test, random_pred, digits=4))

plot_confusion_matrix(random_model, X_test, y_test)

### K-Nearest Neighbours 

knn_params = {'n_neighbors':10, 'algorithm': 'kd_tree', 'n_jobs':4}
knn_model = KNeighborsClassifier(**knn_params)

#Fitting KNN model 
knn_model.fit(X_train, y_train)

knn_pred = knn_model.predict(X_test)

accuracy = accuracy_score(y_test, knn_pred)
print("The accuracy of Logistic regression model is : {}".format(accuracy))

#AUC 
roc = roc_auc_score(y_test, knn_pred)
print("ROC Area under the curve for K-Nearest neighbours : {}".format(roc))
plot_roc_curve(logistic_model, X_test, y_test)

print(classification_report(y_test, knn_pred, digits=4))

plot_confusion_matrix(knn_model, X_test, y_test)
